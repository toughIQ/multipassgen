#!/bin/bash
# Multi-Password-Generator
# Author: toughiq
# Inspired by: voxel

# Usage instructions
usage() {
    echo "usage: $0 [ARGS] [optional: PASSWORD]"
    echo " -i    Interactive Mode."
    echo " -n    Number of Passwords to generate (default 1)"
    echo " -d    Digits of password. (default 20)"
}

# define some variables
PASS=""
INTERACTIVE=0
DIGITS_PWD=20
NUM_PWD=1

# read password from prompt in interactive mode
interactive() {
   PWD1="a"
   PWD2="b"
   until [ $PWD1 == $PWD2 ]; do   
       echo -n "Enter password: "
       read PWD1
       echo -n "Password again: "
       read PWD2
   done
   PASS=$PWD1

}

# generate passwords and print out
generate_password() {
       SHA_SALTED=$(python -c 'import crypt; print(crypt.crypt("'$PASS'", "$6$'`pwgen -c -s -B -n 8 1`'"))')
       MYSQL=$(python -c 'from hashlib import sha1; print "*" + sha1(sha1("'$PASS'").digest()).hexdigest().upper()')

       echo "Your Password: $PASS"
       echo "SHA salted: $SHA_SALTED"
       echo "MySQL: $MYSQL"

}


# Parse commandline arguments
while getopts ":in:d:" opt; do
    case $opt in
        i)
            INTERACTIVE=1
            interactive
            ;;
        n)
            NUM_PWD="$OPTARG"
            ;;
        d)
            DIGITS_PWD="$OPTARG"
            ;;
       
        \?)
            set +x
            echo "Invalid option: -$OPTARG" >&2
            usage
            exit 1
            ;;
        :)
            set +x
            echo "Option -$OPTARG requires an argument." >&2
            usage
            exit 1
            ;;
    esac
done

# we shift the commandline arguments to get an optional password entered as argument
shift $(($OPTIND - 1))

# if there is an password argument and we didnt set PASS already, we do it now
if [ "$1" != "" ] && [ "$PASS" == "" ]
then
   PASS=$1
fi

# if we are not in interactive mode and no password was provided via commandline, we create one
# using digit count as variable parameter
if [ INTERACTIVE == false ] && [ "" == "$1" ]
then
        PASS=`pwgen -c -s -B -n $DIGITS_PWD 1 `

fi

# if -n for multiple passwords was set, we go into a loop to generate them
# we also check, if we didnt already set a password
if [ $NUM_PWD -gt 1 ] && [ "$PASS" == "" ]
then
   for PASS in `pwgen -c -s -B -n $DIGITS_PWD $NUM_PWD`; do
   generate_password
   echo "------"
   done
else
      generate_password 
fi


